x_lim_max = ifelse(
is.null(x_lim_max),
ceiling(max(plot_data$value) * 1.1),
x_lim_max);
plot_object =
ggplot2::ggplot(
data = plot_data,
ggplot2::aes(
y = category,
x = value,
fill = series)
) +
ggplot2::geom_bar(
stat = "identity",
position = ggplot2::position_dodge(width = 1),
colour = "black"
) +
viridis::scale_fill_viridis(discrete = TRUE, direction = -1) +
ggplot2::geom_text(
angle = geom_text_angle,
ggplot2::aes(label = label),
hjust = geom_text_hjust,
size = 3,
vjust = geom_text_vjust,
position = ggplot2::position_dodge(width = 1),
inherit.aes = TRUE
) +
ggplot2::xlim(x_lim_min, x_lim_max) +
ggplot2::coord_flip() +
ggplot2::labs(
title = title,
subtitle = subtitle,
fill = legend_title,
x = axis_x_title,
y = axis_y_title
);
if(axis_text_x_blank){
plot_object = plot_object + ggplot2::theme(
legend.position = "bottom",
axis.text.x = ggplot2::element_blank())
} else {
plot_object = plot_object + ggplot2::theme(
legend.position = "bottom")
}
if(faceted){
plot_object = plot_object + ggplot2::facet_wrap(~facet);
}
if(grid_faceted){
plot_object = plot_object + ggplot2::facet_grid(facet ~ facet_2);
}
return(plot_object);
}
plot_hypothesis_association_dedication_cmm_barchart()
plot_hypothesis_association_dedication_cmm_barchart = function(){
plot_data = prepare_data_hypothesis_specializations_cmm_barchart();
plot_barchart_gradients_dodged_series(
title = "Specialization versus Capability Maturity",
subtitle = "This faceted bar chart shows the capability maturity level distributions of survey answers organized by domains and level of specialization",
axis_x_title = "Domain",
axis_y_title = "Capability Maturity",
plot_data = plot_data, # Pre-summarized data with multiple series
# Data structure: series, category, count, label
legend_title = "Legend",
x_lim_min = NULL,
x_lim_max = NULL,
faceted = FALSE,
grid_faceted = TRUE,
geom_text_angle = 0,
geom_text_hjust = .5,
geom_text_vjust = -.3,
axis_text_x_blank = TRUE
#ncol = 3
);
}
# Enhanced approach used to generate faceted Bar Charts
# along 2 dimensions: domain x specialization.
prepare_data_q20_association_q24 = function(){
plot_data = data.frame();
for(domain_index in 1:nrow(iamperf2020_q24_domains)){
domain_column = as.character(iamperf2020_q24_domains$X[domain_index]);
domain_title = as.character(iamperf2020_q24_domains$Title[domain_index]);
# Hopefuly, domain indexes are identical.
specialization_column = as.character(iamperf2020_q20_domains$X[domain_index]);
for(specialization_index_dedicated in 1:nrow(iamperf2020_q20_team_dedication)){
specialization_level = as.character(iamperf2020_q20_team_dedication$Title[specialization_index_dedicated]);
specialization_filter = iamperf2020_survey[,specialization_column] == specialization_level;
facet_data = prepare_data_barchart_with_single_column_coercion(
iamperf2020_survey[
specialization_filter
,domain_column
],
ordering_option = "level");
facet_data$facet = domain_title;
facet_data$facet_2 = specialization_level;
facet_data$series = facet_data$category; #"Capability Maturity Level";
#facet_data$value = facet_data$count;
facet_data$value = facet_data$frequency;
plot_data = rbind(
plot_data,
facet_data
);
}
}
plot_data = plyr::arrange(plot_data, facet, facet_2, category, series);
# We want ordered factors
# factor order will be re-used in GGPlot2
plot_data$facet = factor(
plot_data$facet,
levels = c(
"IAM (general answer)", "Workforce IAM", "PAM / TAM",
"Customer IAM", "3rd Party IAM", "IoT IAM")
);
plot_data$facet_2 = factor(
plot_data$facet_2,
levels = c( "Predominantly shared", "Balanced", "Predominantly dedicated"),
ordered = TRUE
);
return(plot_data);
}
plot_q20_association_q24_facetedbarchart = function(){
plot_data = prepare_data_q20_association_q24();
plot_barchart_gradients_dodged_series(
title = "Specialization versus Capability Maturity",
subtitle = "This faceted bar chart shows the capability maturity level distributions of survey answers organized by domains and level of specialization",
axis_x_title = "Domain",
axis_y_title = "Capability Maturity",
plot_data = plot_data, # Pre-summarized data with multiple series
# Data structure: series, category, count, label
legend_title = "Legend",
x_lim_min = NULL,
x_lim_max = NULL,
faceted = FALSE,
grid_faceted = TRUE,
geom_text_angle = 0,
geom_text_hjust = .5,
geom_text_vjust = -.3,
axis_text_x_blank = TRUE
#ncol = 3
);
}
plot_q20_association_q24_facetedbarchart();
test_hypothesis_specializations_cmm_derrick = function(){
table_result = data.frame();
for(domain_index in 1:nrow(iamperf2020_q24_domains)){
domain_column = as.character(iamperf2020_q24_domains$X[domain_index]);
domain_title = as.character(iamperf2020_q24_domains$Title[domain_index]);
# Hopefuly, domain indexes are identical.
specialization_column = as.character(iamperf2020_q20_domains$X[domain_index]);
specialization_index_dedicated = 3;
specialization_level_dedicated = as.character(iamperf2020_q20_team_dedication$Title[specialization_index_dedicated]);
specialization_filter_dedicated = iamperf2020_survey[,specialization_column] == specialization_level_dedicated;
specialization_index_shared = 1;
specialization_level_shared = as.character(iamperf2020_q20_team_dedication$Title[specialization_index_shared]);
specialization_filter_shared = iamperf2020_survey[,specialization_column] == specialization_level_shared;
# PREDOMINANTLY DEDICATED
test_hypothesis_ordinal_greater(
h0 = paste(
"The mean capability maturity level of organizations having predominantly specialized / dedicated teams in ",
domain_title,
" is not higher than average.",
sep = ""),
ha = paste(
"The mean capability maturity level of organizations having predominantly specialized / dedicated teams in ",
domain_title,
" is higher than average.",
sep = ""),
sample_1 = as.numeric(ifelse(specialization_filter_dedicated, iamperf2020_survey[, domain_column], NA)),
sample_2 = as.numeric(iamperf2020_survey[, domain_column])
);
cat(".................................................", "\n\n", sep = "");
test_hypothesis_ordinal_greater(
h0 = paste(
"The mean capability maturity level of organizations having predominantly polyvalent / shared teams in ",
domain_title,
" is not lower than average.",
sep = ""),
ha = paste(
"The mean capability maturity level of organizations having predominantly polyvalent / shared teams in ",
domain_title,
" is lower than average.",
sep = ""),
sample_1 = as.numeric(ifelse(specialization_filter_shared, iamperf2020_survey[, domain_column], NA)),
sample_2 = as.numeric(iamperf2020_survey[, domain_column]),
alternative = "less"
);
cat(".................................................", "\n\n", sep = "");
}
}
test_hypothesis_specializations_cmm_derrick()
if(!require("stats")) install.packages("stats");
if(!require("Partiallyoverlapping")) install.packages("Partiallyoverlapping");
test_hypothesis_ordinal_greater = function(
original_hypothesis = NULL,
h0,
ha,
sample_1,
sample_2,
alternative = "greater"
) {
cat("PARTIALLY OVERLAPPING SAMPLES T-TEST as per Derrick et al. (2017)\n")
# Bibliography:
# Derrick, B., White, P., 2018. Methods for comparing the responses from a Likert question, with paired observations and independent observations in each of two samples 10.
cat("Execution of the statistical test using the 'Partover.test' function of the 'Partiallyoverlapping' R package.\n");
if(!is.null(original_hypothesis)){
cat("Original hypothesis:", original_hypothesis, "\n");
}
# This transformation is acceptable because the Wilcoxon test accepts ordinal variables.
cat("H0: ", h0, "\n");
cat("Ha: ", ha, "\n");
# "Naive" approache with Wilcoxon test. Later discarded.
#cat("WILCOXON SIGNED RANK SUM TEST (WSRST) \n\n");
## Execute the Wilcoxon test.
#wilcox_test_outcome = wilcox.test(
#  x = as.numeric(sample_1),
#  y = as.numeric(sample_2),
#  paired = TRUE,
#  #exact = FALSE, # An exact p-value cannot be computed with zeroes
#  conf.int = TRUE,
#  conf.level = .95,
#  alternative = "greater" # See Ha above.
#  );
## Print the test report.
#cat("Execute the statistical test using the 'wilcox.test' function of the 'stats' R package:\n")
#print(wilcox_test_outcome, row.names = FALSE);
## Enrich the report with user-friendly outputs.
#if(wilcox_test_outcome$p.value < .05)
#  {
#    cat("The test is statistically significant.\n\n");
#  } else {
#    cat("The test is not statistically significant.\n\n");
#  };
derrick_test_outcome = Partiallyoverlapping::Partover.test(
x1 = as.numeric(sample_1),
x2 = as.numeric(sample_2),
alternative = alternative,
conf.level = .95,
stacked = TRUE
);
#print(derrick_test_outcome);
# Print a user-friendly version of the test outcome:
cat("The value of the t-statistic:", derrick_test_outcome$statistic, "\n");
cat("The degrees of freedom for the test statistic:", derrick_test_outcome$parameter, "\n");
cat("The p-value for the test:", derrick_test_outcome$p.value, "\n");
cat("The estimated difference in the means:", derrick_test_outcome$estimate, "\n");
cat("A confidence interval for the mean difference appropriate to the specified alternative hypothesis:", derrick_test_outcome$conf.int, "\n\n");
if(derrick_test_outcome$p.value < .05)
{
cat("The test is statistically significant.\n");
} else {
cat("The test is not statistically significant.\n");
};
}
test_hypothesis_specializations_cmm_derrick = function(){
table_result = data.frame();
for(domain_index in 1:nrow(iamperf2020_q24_domains)){
domain_column = as.character(iamperf2020_q24_domains$X[domain_index]);
domain_title = as.character(iamperf2020_q24_domains$Title[domain_index]);
# Hopefuly, domain indexes are identical.
specialization_column = as.character(iamperf2020_q20_domains$X[domain_index]);
specialization_index_dedicated = 3;
specialization_level_dedicated = as.character(iamperf2020_q20_team_dedication$Title[specialization_index_dedicated]);
specialization_filter_dedicated = iamperf2020_survey[,specialization_column] == specialization_level_dedicated;
specialization_index_shared = 1;
specialization_level_shared = as.character(iamperf2020_q20_team_dedication$Title[specialization_index_shared]);
specialization_filter_shared = iamperf2020_survey[,specialization_column] == specialization_level_shared;
# PREDOMINANTLY DEDICATED
test_hypothesis_ordinal_greater(
h0 = paste(
"The mean capability maturity level of organizations having predominantly specialized / dedicated teams in ",
domain_title,
" is not higher than average.",
sep = ""),
ha = paste(
"The mean capability maturity level of organizations having predominantly specialized / dedicated teams in ",
domain_title,
" is higher than average.",
sep = ""),
sample_1 = as.numeric(ifelse(specialization_filter_dedicated, iamperf2020_survey[, domain_column], NA)),
sample_2 = as.numeric(iamperf2020_survey[, domain_column])
);
cat(".................................................", "\n\n", sep = "");
test_hypothesis_ordinal_greater(
h0 = paste(
"The mean capability maturity level of organizations having predominantly polyvalent / shared teams in ",
domain_title,
" is not lower than average.",
sep = ""),
ha = paste(
"The mean capability maturity level of organizations having predominantly polyvalent / shared teams in ",
domain_title,
" is lower than average.",
sep = ""),
sample_1 = as.numeric(ifelse(specialization_filter_shared, iamperf2020_survey[, domain_column], NA)),
sample_2 = as.numeric(iamperf2020_survey[, domain_column]),
alternative = "less"
);
cat(".................................................", "\n\n", sep = "");
}
}
test_hypothesis_specializations_cmm_derrick()
Kendall::Kendall(iamperf2020_survey$Q20R1, iamperf2020_survey$Q24R1)
Kendall::Kendall(iamperf2020_survey$Q20R2, iamperf2020_survey$Q24R2)
Kendall::Kendall(iamperf2020_survey$Q20R3, iamperf2020_survey$Q24R3)
Kendall::Kendall(iamperf2020_survey$Q20R4, iamperf2020_survey$Q24R4)
Kendall::Kendall(iamperf2020_survey$Q20R5, iamperf2020_survey$Q24R5)
Kendall::Kendall(iamperf2020_survey$Q20R6, iamperf2020_survey$Q24R6)
iamperf2020_q24_domains
test_q20_association_q24_kendall = function(){
for(domain_index in 1:nrow(iamperf2020_q24_domains)){
print(iamperf2020_q24_domains$Title);
capability_maturity = iamperf2020_survey[paste0("Q24R", domain_index)];
specialization = iamperf2020_survey[paste0("Q20R", domain_index)];
Kendall::Kendall(capability_maturity, specialization);
}
}
test_q20_association_q24_kendall
test_q20_association_q24_kendall()
for(domain_index in 1:nrow(iamperf2020_q24_domains)){
print(iamperf2020_q24_domains$Title);
capability_maturity = iamperf2020_survey[paste0("Q24R", domain_index)];
specialization = iamperf2020_survey[paste0("Q20R", domain_index)];
print(Kendall::Kendall(capability_maturity, specialization));
}
for(domain_index in 1:nrow(iamperf2020_q24_domains)){
print(iamperf2020_q24_domains$Title);
capability_maturity = iamperf2020_survey[paste0("Q24R", domain_index)];
specialization = iamperf2020_survey[paste0("Q20R", domain_index)];
#print(Kendall::Kendall(capability_maturity, specialization));
}
for(domain_index in 1:nrow(iamperf2020_q24_domains)){
cat(iamperf2020_q24_domains$Title, "\n");
capability_maturity = iamperf2020_survey[paste0("Q24R", domain_index)];
specialization = iamperf2020_survey[paste0("Q20R", domain_index)];
#print(Kendall::Kendall(capability_maturity, specialization));
}
for(domain_index in 1:nrow(iamperf2020_q24_domains)){
cat(iamperf2020_q24_domains[domain_index, c("Title")], "\n");
capability_maturity = iamperf2020_survey[paste0("Q24R", domain_index)];
specialization = iamperf2020_survey[paste0("Q20R", domain_index)];
#print(Kendall::Kendall(capability_maturity, specialization));
}
iamperf2020_q24_domains[domain_index, c("Title")]
for(domain_index in 1:nrow(iamperf2020_q24_domains)){
cat(as.character(iamperf2020_q24_domains[domain_index, c("Title")]), "\n");
capability_maturity = iamperf2020_survey[paste0("Q24R", domain_index)];
specialization = iamperf2020_survey[paste0("Q20R", domain_index)];
#print(Kendall::Kendall(capability_maturity, specialization));
}
for(domain_index in 1:nrow(iamperf2020_q24_domains)){
cat(as.character(iamperf2020_q24_domains[domain_index, c("Title")]), "\n");
capability_maturity = iamperf2020_survey[paste0("Q24R", domain_index)];
specialization = iamperf2020_survey[paste0("Q20R", domain_index)];
cat(Kendall::Kendall(capability_maturity, specialization), "\n");
}
domain_index = 1
cat(as.character(iamperf2020_q24_domains[domain_index, c("Title")]), "\n");
capability_maturity = iamperf2020_survey[paste0("Q24R", domain_index)];
specialization = iamperf2020_survey[paste0("Q20R", domain_index)];
cat(Kendall::Kendall(capability_maturity, specialization), "\n");
Kendall::Kendall(capability_maturity, specialization)
capability_maturity
View(data.frame(capability_maturity = capability_maturity, specialization = specialization))
Kendall::Kendall(capability_maturity, specialization)
domain_data = data.frame(
capability_maturity = iamperf2020_survey[paste0("Q24R", domain_index)]
,specialization = iamperf2020_survey[paste0("Q20R", domain_index)]
);
cat(as.character(iamperf2020_q24_domains[domain_index, c("Title")]), "\n");
# Retrieve survey data
domain_data = data.frame(
capability_maturity = iamperf2020_survey[paste0("Q24R", domain_index)]
,specialization = iamperf2020_survey[paste0("Q20R", domain_index)]
);
cat(as.character(iamperf2020_q24_domains[domain_index, c("Title")]), "\n");
# Retrieve survey data
domain_data = data.frame(
capability_maturity = iamperf2020_survey[paste0("Q24R", domain_index)]
,specialization = iamperf2020_survey[paste0("Q20R", domain_index)]
);
# Remove NAs
domain_data = domain_data[!is.na(domain_data$capability_maturity),];
domain_data = domain_data[!is.na(domain_data$specialization),];
cat(Kendall::Kendall(domain_data$capability_maturity, domain_data$specialization), "\n");
?Kendall::Kendall
View(domain_data)
# Retrieve survey data
domain_data = data.frame(
capability_maturity = iamperf2020_survey[paste0("Q24R", domain_index)]
,specialization = iamperf2020_survey[paste0("Q20R", domain_index)]
);
View(domain_data)
cat(as.character(iamperf2020_q24_domains[domain_index, c("Title")]), "\n");
# Retrieve survey data
domain_data = data.frame(
capability_maturity = iamperf2020_survey[paste0("Q24R", domain_index)]
,specialization = iamperf2020_survey[paste0("Q20R", domain_index)]
);
!is.na(domain_data$capability_maturity)
View(domain_data)
domain_index
# Retrieve survey data
domain_data = data.frame(
capability_maturity = iamperf2020_survey[paste0("Q24R", domain_index)],
specialization = iamperf2020_survey[paste0("Q20R", domain_index)]
);
View(domain_data)
# Retrieve survey data
domain_data = data.frame();
domain_data$capability_maturity = iamperf2020_survey[paste0("Q24R", domain_index)],
domain_data$cspecialization = iamperf2020_survey[paste0("Q20R", domain_index)]
# Remove NAs
domain_data = domain_data[!is.na(domain_data$capability_maturity),];
# Retrieve survey data
domain_data = data.frame();
domain_data$capability_maturity = iamperf2020_survey[paste0("Q24R", domain_index)];
domain_data$cspecialization = iamperf2020_survey[paste0("Q20R", domain_index)];
iamperf2020_survey[paste0("Q24R", domain_index)]
# Retrieve survey data
domain_data = data.frame();
domain_data$capability_maturity = iamperf2020_survey[paste0("Q24R", domain_index)];
# Retrieve survey data
domain_data = data.frame(
iamperf2020_survey[paste0("Q24R", domain_index)],
iamperf2020_survey[paste0("Q20R", domain_index)]
);
colnames(domain_data) = c("capability_maturity", "specialization");
View(domain_data)
# Remove NAs
domain_data = domain_data[!is.na(domain_data$capability_maturity),];
domain_data = domain_data[!is.na(domain_data$specialization),];
View(domain_data)
cat(Kendall::Kendall(domain_data$capability_maturity, domain_data$specialization), "\n");
print(Kendall::Kendall(domain_data$capability_maturity, domain_data$specialization));
for(domain_index in 1:nrow(iamperf2020_q24_domains)){
cat(as.character(iamperf2020_q24_domains[domain_index, c("Title")]), "\n");
# Retrieve survey data
domain_data = data.frame(
iamperf2020_survey[paste0("Q24R", domain_index)],
iamperf2020_survey[paste0("Q20R", domain_index)]
);
colnames(domain_data) = c("capability_maturity", "specialization");
# Remove NAs
domain_data = domain_data[!is.na(domain_data$capability_maturity),];
domain_data = domain_data[!is.na(domain_data$specialization),];
print(Kendall::Kendall(domain_data$capability_maturity, domain_data$specialization));
}
for(domain_index in 1:nrow(iamperf2020_q24_domains)){
cat(as.character(iamperf2020_q24_domains[domain_index, c("Title")]), ":\n");
# Retrieve survey data
domain_data = data.frame(
iamperf2020_survey[paste0("Q24R", domain_index)],
iamperf2020_survey[paste0("Q20R", domain_index)]
);
colnames(domain_data) = c("capability_maturity", "specialization");
# Remove NAs
domain_data = domain_data[!is.na(domain_data$capability_maturity),];
domain_data = domain_data[!is.na(domain_data$specialization),];
print(Kendall::Kendall(domain_data$capability_maturity, domain_data$specialization));
}
for(domain_index in 1:nrow(iamperf2020_q24_domains)){
cat("\n", as.character(iamperf2020_q24_domains[domain_index, c("Title")]), ":\n");
# Retrieve survey data
domain_data = data.frame(
iamperf2020_survey[paste0("Q24R", domain_index)],
iamperf2020_survey[paste0("Q20R", domain_index)]
);
colnames(domain_data) = c("capability_maturity", "specialization");
# Remove NAs
domain_data = domain_data[!is.na(domain_data$capability_maturity),];
domain_data = domain_data[!is.na(domain_data$specialization),];
print(Kendall::Kendall(domain_data$capability_maturity, domain_data$specialization));
}
for(domain_index in 1:nrow(iamperf2020_q24_domains)){
print(as.character(iamperf2020_q24_domains[domain_index, c("Title")]));
# Retrieve survey data
domain_data = data.frame(
iamperf2020_survey[paste0("Q24R", domain_index)],
iamperf2020_survey[paste0("Q20R", domain_index)]
);
colnames(domain_data) = c("capability_maturity", "specialization");
# Remove NAs
domain_data = domain_data[!is.na(domain_data$capability_maturity),];
domain_data = domain_data[!is.na(domain_data$specialization),];
print(Kendall::Kendall(domain_data$capability_maturity, domain_data$specialization));
}
for(domain_index in 1:nrow(iamperf2020_q24_domains)){
cat(as.character(iamperf2020_q24_domains[domain_index, c("Title")]), "\n");
# Retrieve survey data
domain_data = data.frame(
iamperf2020_survey[paste0("Q24R", domain_index)],
iamperf2020_survey[paste0("Q20R", domain_index)]
);
colnames(domain_data) = c("capability_maturity", "specialization");
# Remove NAs
domain_data = domain_data[!is.na(domain_data$capability_maturity),];
domain_data = domain_data[!is.na(domain_data$specialization),];
print(Kendall::Kendall(domain_data$capability_maturity, domain_data$specialization));
}
test_q20_association_q24_kendall();
test_q20_association_q24_kendall = function(){
for(domain_index in 1:nrow(iamperf2020_q24_domains)){
cat(as.character(iamperf2020_q24_domains[domain_index, c("Title")]), "\n");
# Retrieve survey data
domain_data = data.frame(iamperf2020_survey[paste0("Q24R", domain_index)], iamperf2020_survey[paste0("Q20R", domain_index)]);
colnames(domain_data) = c("capability_maturity", "specialization");
# Remove NAs
domain_data = domain_data[!is.na(domain_data$capability_maturity),];
domain_data = domain_data[!is.na(domain_data$specialization),];
print(Kendall::Kendall(domain_data$capability_maturity, domain_data$specialization));
}
}
test_q20_association_q24_kendall();
