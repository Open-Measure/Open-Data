keep.order = TRUE,
set_size.show	= TRUE) +
scale_colour_brewer(
palette = "YlGnBu",
direction = -1);
upset_plot = ggplot2::last_plot();
return(upset_plot);
}
print("IAMPerf2020 environment loaded.")
# References
#
# I list here a bunch of articles that have been inspiring or helpful while writing this notebook.
#
# * https://stackoverflow.com/questions/35720660/how-to-use-an-r-script-from-github
# * https://www.sheffield.ac.uk/polopoly_fs/1.714591!/file/stcp-karadimitriou-categoricalR.pdf
prepare_data_q24_likert_plot = function(){
plot_data = iamperf2020_survey[,as.character(iamperf2020_q24_domains$X)];
# Re-set the column names to the long titles to get proper labels on the graph.
colnames(plot_data) = iamperf2020_q24_domains$Title;
return(plot_data);
}
plot_q24_likert = function(){
plot_data = prepare_data_q24_likert_plot();
likert_data = likert::likert(plot_data);
plot_object = graphics::plot(
likert_data,
type = "bar",
col = RColorBrewer::brewer.pal(n = 4, name = "YlGnBu"));
return(plot_object);
}
save_plot(
plot_object = plot_q24_likert(),
file_name = "IAMPerf2020-Q24-Maturity-LikertChart.png",
width = 11);
prepare_data_q24_likert_plot()
plot_q24_likert = function(){
plot_data = prepare_data_q24_likert_plot();
likert_data = likert::likert(plot_data);
plot_object = graphics::plot(
likert_data,
type = "bar",
col = RColorBrewer::brewer.pal(n = 5, name = "YlGnBu"));
return(plot_object);
}
save_plot(
plot_object = plot_q24_likert(),
file_name = "IAMPerf2020-Q24-Maturity-LikertChart.png",
width = 11);
plot_q24_likert()
view(survey_rawdata)
View(survey_rawdata)
colnames(survey_rawdata)
unique(survey_rawdata$Q25)
unique(survey_rawdata$Q26A1)
sjlabelled::get_label(survey_rawdata$Q26A1)
sjlabelled::get_label(survey_rawdata$Q26A7)
sjlabelled::get_labels(survey_rawdata$Q26A1);
sjlabelled::get_label(survey_rawdata$Q26A2);
sjlabelled::get_labels(survey_rawdata$Q26A2);
sjlabelled::get_labels(survey_rawdata$Q26A1)
sjlabelled::get_labels(survey_rawdata$Q26A3)
sjlabelled::get_labels(survey_rawdata$Q26A4)
sjlabelled::get_labels(survey_rawdata$Q26A5)
sjlabelled::get_labels(survey_rawdata$Q26A6)
# Q26: Indicator Role
prefix = "IndRole-What role(s) do you play in relation to IAM performance indicators in your organization? - ";
# Q26: Indicator Role
q26_prefix = "IndRole-What role(s) do you play in relation to IAM performance indicators in your organization? - ";
q26_indicator_roles = data.frame(
Title = c(
sjlabelled::get_labels(survey_rawdata$Q26A1), # I decide what indicators the organization uses
sjlabelled::get_labels(survey_rawdata$Q26A2), # I design indicators
sjlabelled::get_labels(survey_rawdata$Q26A3), # I collect, clean and compute data
sjlabelled::get_labels(survey_rawdata$Q26A4), # I report indicators
sjlabelled::get_labels(survey_rawdata$Q26A5), # I analyse or use indicators
sjlabelled::get_labels(survey_rawdata$Q26A6) # Other
# sjlabelled::get_label(survey_rawdata$Q26A7) # I don't know / NA.
)
);
# Set row names.
row.names(q26_indicator_roles) = paste("Q26A", 1:6, sep = "");
q26_indicator_roles
# Save the file
write.csv(q26_indicator_roles,"IAMPerf2020Q26IndicatorRoles.csv");
iamperf2020_q26_indicator_roles <- read.csv (text = RCurl::getURL(paste0(iamperf2020_data_url, "IAMPerf2020Q26IndicatorRoles.csv")));
iamperf2020_q26_indicator_roles
# Q26: Indicator Roles
for(column_counter in 1:nrow(iamperf2020_q26_indicator_roles)){
current_column = as.character(iamperf2020_q26_indicator_roles[column_counter, "X"]);
current_levels = c(1); # Single level :-)
current_labels = as.character(iamperf2020_q26_indicator_roles[column_counter, "Title"]);
iamperf2020_survey[,current_column] = factor(
iamperf2020_survey[,current_column],
levels = current_levels,
labels = current_labels,
ordered = FALSE, exclude = NA);
};
iamperf2020_survey[,as.character(iamperf2020_q26_indicator_roles$X)]
iamperf2020_survey[,as.character(iamperf2020_q26_indicator_roles$X)]
# Q26 - Indicator Role
plot_upset(
title = "title",
subtitle = "subtitle",
caption = "caption",
data_frame = iamperf2020_survey[,as.character(iamperf2020_q26_indicator_roles$X)]
)
## Small trick for good-looking chart labels
# When labelling charts with ratios, such as percentages, naive number rounding
# naturally yield incorrect sums (e.g. the sum of label percentages is 99.9% or
# 100.1 instead of 100%). This may surprise readers. To avoid this, the Largest
# Remainder Method may be applied. Values will be slightly incorrect (this is
# unavoidable because of the rounding) but the same will be correct.
rounded_ratios_with_largest_remainder = function(
int_values,
target_sum = 100, # Default for percentages
digits = 2){
parties = paste0("p", 1:length(int_values)); # Arbitraty party names.
inflated_target = target_sum * 10 ^ digits; # Largest remainder method is designed to work with integer values. Because we want numbers with n digits, we need to inflate our numbers temporarily.
election = electoral::seats_lr(
parties = parties,
votes = int_values,
n_seats = inflated_target,
method = "hare");
deflated_election = election / 10 ^ digits;
return(deflated_election);
}
# Retrieve the category full names from the factor labels.
friendly_categories = as.character(unlist(lapply(data_frame, levels)));
data_frame = iamperf2020_survey[,as.character(iamperf2020_q26_indicator_roles$X)]
# Retrieve the category full names from the factor labels.
friendly_categories = as.character(unlist(lapply(data_frame, levels)));
friendly_categories
# Convert our data to a matrix of 0s and 1s.
data_frame = as.data.frame(ifelse(!is.na(data_frame),1,0));
data_frame
# Remove survey answers that have no option selected.
data_frame = data_frame[rowSums(data_frame) > 0,];
data_frame
# UpSetR::upset expects that column names are equal to friendly category names.
colnames(data_frame) = friendly_categories;
data_frame
# Remove categories that have never been used.
data_frame = data_frame[,colSums(data_frame) > 0];
# Reduce categories to active categories,
# and sort categories by frequencies.
friendly_categories = names(sort(colSums(data_frame), decreasing = FALSE));
friendly_categories
# Plot the UpSet diagram.
UpSetR::upset(
data = data_frame,
sets = friendly_categories,
nintersects = NA,
#  order.by = "freq",
mb.ratio = c(0.3, 0.7),
keep.order = TRUE,
set_size.show	= TRUE) +
scale_colour_brewer(
palette = "YlGnBu",
direction = -1);
# Plot the UpSet diagram.
UpSetR::upset(
data = data_frame,
sets = friendly_categories,
nintersects = NA,
#  order.by = "freq",
mb.ratio = c(0.3, 0.7),
keep.order = TRUE,
set_size.show	= TRUE) +
scale_colour_brewer(
palette = "YlGnBu",
direction = -1);
UpSetR::upset(
data = data_frame,
sets = friendly_categories)
UpSetR::upset(
data = data_frame,
sets = friendly_categories,
nintersects = NA,
#  order.by = "freq",
mb.ratio = c(0.3, 0.7),
keep.order = TRUE,
set_size.show	= TRUE)
UpSetR::upset(
data = data_frame,
sets = friendly_categories,
nintersects = NA,
#  order.by = "freq",
mb.ratio = c(0.3, 0.7),
keep.order = TRUE,
set_size.show	= TRUE) +
scale_colour_brewer(
palette = "YlGnBu",
direction = -1);
?UpSetR::upset
RColorBrewer::brewer.pal(n = 5, name = "Accent")
RColorBrewer::brewer.pal(n = 5, name = "Accent")
length(friendly_categories)
# Plot the UpSet diagram.
UpSetR::upset(
data = data_frame,
sets = friendly_categories,
nintersects = NA,
main.bar.color = RColorBrewer::brewer.pal(
n = length(friendly_categories),
name = "Accent"),
#  order.by = "freq",
mb.ratio = c(0.3, 0.7),
keep.order = TRUE,
set_size.show	= TRUE)
# Plot the UpSet diagram.
UpSetR::upset(
data = data_frame,
sets = friendly_categories,
nintersects = NA,
sets.bar.color = RColorBrewer::brewer.pal(
n = length(friendly_categories),
name = "Accent"),
#  order.by = "freq",
mb.ratio = c(0.3, 0.7),
keep.order = TRUE,
set_size.show	= TRUE)
# Plot the UpSet diagram.
UpSetR::upset(
data = data_frame,
sets = friendly_categories,
nintersects = NA,
sets.bar.color = RColorBrewer::brewer.pal(
n = length(friendly_categories),
name = "Accent"),
matrix.color = RColorBrewer::brewer.pal(
n = length(friendly_categories),
name = "Accent"),
#  order.by = "freq",
mb.ratio = c(0.3, 0.7),
keep.order = TRUE,
set_size.show	= TRUE)
warnings()
RColorBrewer::brewer.pal(
n = length(friendly_categories),
name = "Accent") * 22
rep(22, RColorBrewer::brewer.pal(
n = length(friendly_categories),
name = "Accent"))
plot_upset = function(
title = NULL,
subtitle = NULL,
caption,
data_frame){
# Uses the UpSetR package to plot an Upset graph.
# This is ideal for the visualization of categorical data (or sets)
# when the number of categories is no longer supporder by
# Venn and Euler diagrams.
#
# Inputs:
# data_frame: expects a dataframe composed of columns,
# where every column is a category with a single level,
# where the factor is labelled with a "friendly" category name,
# and where NA means "not selected".
#
# References:
# - https://academic.oup.com/bioinformatics/article/33/18/2938/3884387
# - https://cran.r-project.org/web/packages/UpSetR/vignettes/basic.usage.html
#
#if(!require("ggplot2")) install.packages("ggplot2");
#if(!require("viridis")) install.packages("viridis");
if(!require("UpSetR")) install.packages("UpSetR");
#if(!require("ggstatsplot")) install.packages("ggstatsplot");
# Retrieve the category full names from the factor labels.
friendly_categories = as.character(unlist(lapply(data_frame, levels)));
# Convert our data to a matrix of 0s and 1s.
data_frame = as.data.frame(ifelse(!is.na(data_frame),1,0));
# Remove survey answers that have no option selected.
data_frame = data_frame[rowSums(data_frame) > 0,];
# UpSetR::upset expects that column names are equal to friendly category names.
colnames(data_frame) = friendly_categories;
# Remove categories that have never been used.
data_frame = data_frame[,colSums(data_frame) > 0];
# Reduce categories to active categories,
# and sort categories by frequencies.
friendly_categories = names(sort(colSums(data_frame), decreasing = FALSE));
# Plot the UpSet diagram.
UpSetR::upset(
data = data_frame,
sets = friendly_categories,
nintersects = NA,
sets.bar.color = RColorBrewer::brewer.pal(
n = length(friendly_categories),
name = "Accent"),
matrix.color = RColorBrewer::brewer.pal(
n = length(friendly_categories),
name = "Accent"),
#  order.by = "freq",
mb.ratio = c(0.3, 0.7),
keep.order = TRUE,
set_size.show	= TRUE)
upset_plot = ggplot2::last_plot();
return(upset_plot);
}
plot_upset = function(
title = NULL,
subtitle = NULL,
caption,
data_frame){
# Uses the UpSetR package to plot an Upset graph.
# This is ideal for the visualization of categorical data (or sets)
# when the number of categories is no longer supporder by
# Venn and Euler diagrams.
#
# Inputs:
# data_frame: expects a dataframe composed of columns,
# where every column is a category with a single level,
# where the factor is labelled with a "friendly" category name,
# and where NA means "not selected".
#
# References:
# - https://academic.oup.com/bioinformatics/article/33/18/2938/3884387
# - https://cran.r-project.org/web/packages/UpSetR/vignettes/basic.usage.html
#
#if(!require("ggplot2")) install.packages("ggplot2");
#if(!require("viridis")) install.packages("viridis");
if(!require("UpSetR")) install.packages("UpSetR");
#if(!require("ggstatsplot")) install.packages("ggstatsplot");
# Retrieve the category full names from the factor labels.
friendly_categories = as.character(unlist(lapply(data_frame, levels)));
# Convert our data to a matrix of 0s and 1s.
data_frame = as.data.frame(ifelse(!is.na(data_frame),1,0));
# Remove survey answers that have no option selected.
data_frame = data_frame[rowSums(data_frame) > 0,];
# UpSetR::upset expects that column names are equal to friendly category names.
colnames(data_frame) = friendly_categories;
# Remove categories that have never been used.
data_frame = data_frame[,colSums(data_frame) > 0];
# Reduce categories to active categories,
# and sort categories by frequencies.
friendly_categories = names(sort(colSums(data_frame), decreasing = FALSE));
# Plot the UpSet diagram.
UpSetR::upset(
data = data_frame,
sets = friendly_categories,
nintersects = NA,
sets.bar.color = RColorBrewer::brewer.pal(
n = length(friendly_categories),
name = "Accent"),
#  order.by = "freq",
mb.ratio = c(0.3, 0.7),
keep.order = TRUE,
set_size.show	= TRUE)
upset_plot = ggplot2::last_plot();
return(upset_plot);
}
# Q26 - Indicator Role
plot_object = plot_upset(
title = "title",
subtitle = "subtitle",
caption = "caption",
data_frame = iamperf2020_survey[,as.character(iamperf2020_q26_indicator_roles$X)]
)
# Q26 - Indicator Role
plot_object = plot_upset(
title = "Participant Roles regarding IAM Indicators",
subtitle = "subtitle",
caption = "caption",
data_frame = iamperf2020_survey[,as.character(iamperf2020_q26_indicator_roles$X)]
)
save_plot(
plot_object = plot_q24_likert(),
file_name = "IAMPerf2020-Q26-IndicatorRoles-UpSetChart.png",
width = 11);
save_plot(
plot_object = plot_q26_likert(),
file_name = "IAMPerf2020-Q26-IndicatorRoles-UpSetChart.png",
width = 11);
# Q26 - Indicator Role
plot_q26_upset = function(){
plot_object = plot_upset(
title = "Participant Roles regarding IAM Indicators",
subtitle = "subtitle",
caption = "caption",
data_frame = iamperf2020_survey[,as.character(iamperf2020_q26_indicator_roles$X)]
)
return(plot_object);
}
save_plot(
plot_object = plot_q26_upset(),
file_name = "IAMPerf2020-Q26-IndicatorRoles-UpSetChart.png",
width = 11);
plot_q26_upset()
plot_upset = function(
title = NULL,
subtitle = NULL,
caption,
data_frame){
# Uses the UpSetR package to plot an Upset graph.
# This is ideal for the visualization of categorical data (or sets)
# when the number of categories is no longer supporder by
# Venn and Euler diagrams.
#
# Inputs:
# data_frame: expects a dataframe composed of columns,
# where every column is a category with a single level,
# where the factor is labelled with a "friendly" category name,
# and where NA means "not selected".
#
# References:
# - https://academic.oup.com/bioinformatics/article/33/18/2938/3884387
# - https://cran.r-project.org/web/packages/UpSetR/vignettes/basic.usage.html
#
#if(!require("ggplot2")) install.packages("ggplot2");
#if(!require("viridis")) install.packages("viridis");
if(!require("UpSetR")) install.packages("UpSetR");
#if(!require("ggstatsplot")) install.packages("ggstatsplot");
# Retrieve the category full names from the factor labels.
friendly_categories = as.character(unlist(lapply(data_frame, levels)));
# Convert our data to a matrix of 0s and 1s.
data_frame = as.data.frame(ifelse(!is.na(data_frame),1,0));
# Remove survey answers that have no option selected.
data_frame = data_frame[rowSums(data_frame) > 0,];
# UpSetR::upset expects that column names are equal to friendly category names.
colnames(data_frame) = friendly_categories;
# Remove categories that have never been used.
data_frame = data_frame[,colSums(data_frame) > 0];
# Reduce categories to active categories,
# and sort categories by frequencies.
friendly_categories = names(sort(colSums(data_frame), decreasing = FALSE));
# Plot the UpSet diagram.
UpSetR::upset(
data = data_frame,
sets = friendly_categories,
nintersects = NA,
sets.bar.color = RColorBrewer::brewer.pal(
n = length(friendly_categories),
name = "Accent"),
matrix.color = "black",
#  order.by = "freq",
mb.ratio = c(0.3, 0.7),
keep.order = TRUE,
set_size.show	= TRUE)
upset_plot = ggplot2::last_plot();
return(upset_plot);
}
# Q26 - Indicator Role
plot_q26_upset = function(){
plot_object = plot_upset(
title = "Participant Roles regarding IAM Indicators",
subtitle = "subtitle",
caption = "caption",
data_frame = iamperf2020_survey[,as.character(iamperf2020_q26_indicator_roles$X)]
)
return(plot_object);
}
save_plot(
plot_object = plot_q26_upset(),
file_name = "IAMPerf2020-Q26-IndicatorRoles-UpSetChart.png",
width = 11);
plot_q26_upset()
# Plot the UpSet diagram.
UpSetR::upset(
data = data_frame,
sets = friendly_categories,
nintersects = NA,
sets.bar.color = RColorBrewer::brewer.pal(
n = length(friendly_categories),
name = "Accent"),
matrix.color = "black",
#  order.by = "freq",
mb.ratio = c(0.3, 0.7),
keep.order = TRUE,
set_size.show	= TRUE)
upset_plot = ggplot2::last_plot();
upset_plot
install_github("hms-dbmi/UpSetR")
devtools::install_github("hms-dbmi/UpSetR")
library(devtools)
install.packages("devtools")
# where the factor is labelled with a "friendly" category name,
# and where NA means "not selected".
#
# References:
# - https://academic.oup.com/bioinformatics/article/33/18/2938/3884387
# - https://cran.r-project.org/web/packages/UpSetR/vignettes/basic.usage.html
#
#if(!require("ggplot2")) install.packages("ggplot2");
#if(!require("viridis")) install.packages("viridis");
#if(!require("UpSetR")) install.packages("UpSetR");
if(!require("devtools")) install.packages("devtools");
devtools::install_github("hms-dbmi/UpSetR")
# where the factor is labelled with a "friendly" category name,
# and where NA means "not selected".
#
# References:
# - https://academic.oup.com/bioinformatics/article/33/18/2938/3884387
# - https://cran.r-project.org/web/packages/UpSetR/vignettes/basic.usage.html
#
#if(!require("ggplot2")) install.packages("ggplot2");
#if(!require("viridis")) install.packages("viridis");
#if(!require("UpSetR")) install.packages("UpSetR");
if(!require("processx")) install.packages("processx");
if(!require("devtools")) install.packages("devtools");
devtools::install_github("hms-dbmi/UpSetR")
# where the factor is labelled with a "friendly" category name,
# and where NA means "not selected".
#
# References:
# - https://academic.oup.com/bioinformatics/article/33/18/2938/3884387
# - https://cran.r-project.org/web/packages/UpSetR/vignettes/basic.usage.html
#
#if(!require("ggplot2")) install.packages("ggplot2");
#if(!require("viridis")) install.packages("viridis");
#if(!require("UpSetR")) install.packages("UpSetR");
if(!require("processx")) install.packages("processx");
if(!require("devtools")) install.packages("devtools");
devtools::install_github("hms-dbmi/UpSetR")
